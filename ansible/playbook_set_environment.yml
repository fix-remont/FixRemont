- name: set_environment
  hosts: '{{ hosts }}'
  # gather_facts: false
  become: true
  tasks:
    # - name: install apt dependencies for postgres, python3
    #   apt:
    #     name: '{{ item }}'
    #     state: present
    #   loop:
    #     - libssl-dev
    #     - libreadline-dev
    #     - zlib1g-dev
    #     - libyaml-dev
    #     - libsqlite3-dev
    #     - sqlite3
    #     - libxml2-dev
    #     - libxslt1-dev
    #     - libcurl4-openssl-dev
    #     - software-properties-common
    #     - libffi-dev
    #     - libpq-dev

    # - name: install nodejs
    #   include_role: name=geerlingguy.nodejs
    #   vars:
    #     nodejs_version: '20.x'

    # - name: Install pnpm globally using npm
    #   ansible.builtin.npm:
    #     name: pnpm
    #     global: yes
    #     state: present

    # - name: Install pm2 globally using npm
    #   ansible.builtin.npm:
    #     name: pm2
    #     global: yes
    #     state: present

    # - name: add nginx and configure
    #   ansible.builtin.include_role:
    #     name: geerlingguy.nginx
    #   vars:
    #     nginx_vhosts:
    #       - listen: 80
    #         server_name: '{{ ansible_remote_ip }}'
    #         state: present
    #         filename: frontend.conf
    #         extra_parameters: |
    #           location / {
    #             proxy_pass http://127.0.0.1:3000;
    #             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #             proxy_set_header X-Forwarded-Proto $scheme;
    #             proxy_set_header X-Forwarded-Host $host;
    #             proxy_set_header X-Forwarded-Prefix /;

    #           }
    #       - listen:
    #           7000
    #           # proxy_buffering off;
    #         server_name: '{{ ansible_remote_ip }}'
    #         state: present
    #         filename: backend.conf
    #         extra_parameters: |
    #           location / {
    #             proxy_pass http://127.0.0.1:8000;
    #             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #             proxy_set_header X-Forwarded-Proto $scheme;
    #             proxy_set_header X-Forwarded-Host $host;
    #             proxy_set_header X-Forwarded-Prefix /;

    #           }

    # - name: create project directory
    #   ansible.builtin.file:
    #     path: '{{ remote_app_path }}'
    #     state: directory

    # - name: copy .env file
    #   ansible.builtin.copy:
    #     src: '{{ local_app_path }}/.env'
    #     dest: '{{ remote_app_path }}/.env'

    # - name: copy ecosystem.config.js file
    #   ansible.builtin.template:
    #     src: '{{ local_app_path }}/ecosystem.config.js'
    #     dest: '{{ remote_app_path }}/ecosystem.config.js'

    - name: install python3
      ansible.builtin.apt:
        name: python3=3.12.0

    - name: install pip
      ansible.builtin.apt:
        name: pip
      vars:
        python3_pyenv: '3.12.x'

    # права на создание db надо вручную. почему-то создаётся юзер без этих привелегий
    # sudo -u postgres psql
    # \du
    # CREATE ROLE staging CREATEDB LOGIN PASSWORD 'fixremont_password';
    # CREATE DATABASE fixremont_staging OWNER staging;
    # - name: install postgres
    #   ansible.builtin.include_role:
    #     name: geerlingguy.postgresql
#####################################################################
# vars:
#   postgresql_users:
#     - name: "{{ remote_env_vars['DB_USERNAME'] }}"
#       password: "{{ remote_env_vars['DB_PASSWORD'] }}"
#       # role_attr_flags: CREATEDB LOGIN
#   postgresql_databases:
#     - name: "{{ remote_env_vars['DB_NAME'] }}"
#       login_host: localhost
#       login_password: "{{ remote_env_vars['DB_PASSWORD'] }}"
#       login_user: "{{ remote_env_vars['DB_USERNAME'] }}"
#   postgres_users_no_log: false
#   postgresql_hba_entries:
#     - { type: local, database: all, user: '{{ remote_env_vars["DB_USERNAME"] }}', auth_method: trust }
#     - { type: local, database: all, user: postgres, auth_method: trust }
#     - { type: local, database: all, user: all, auth_method: trust }
#     - { type: host, database: all, user: '{{ remote_env_vars["DB_USERNAME"] }}', address: '127.0.0.1/32', auth_method: trust }
#     - { type: host, database: all, user: postgres, address: '127.0.0.1/32', auth_method: trust }
#     - { type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: trust }
